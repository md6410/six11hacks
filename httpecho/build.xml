<!-- You may want to do search-replace on the apersand. -->
<project name="httpecho" default="compile" basedir=".">

  <property name="propertyFile" value="build.properties" />

  <!-- ==================== Compilation Classpath =========================== -->

  <path id="compile.classpath">
    <fileset dir="lib">
      <include name="*.jar"/>
    </fileset> 
  </path>

  <taskdef classpathref="compile.classpath"
           resource="org/apache/catalina/ant/catalina.tasks" />
  <property file="${propertyFile}" />
  <property file="${tomcat.props.file}" />

  <!-- ==================== All Target ====================================== -->

  <target name="all" depends="clean,compile"
	  description="Clean build and dist directories, then compile"/>

  <!-- ==================== Prepare Target ================================== -->

  <target name="prepare">
    <mkdir dir="${build.dir}" />
    <mkdir dir="${compile.output.dir}" />
    <mkdir dir="${javadoc.output.dir}" />
  </target>

  <!-- ==================== Clean Target ==================================== -->

  <target name="clean"
	  description="Delete old class files and backup source files">
    <delete failonerror="false" >
      <fileset defaultexcludes="no" dir="${compile.output.dir}" includes="**/*.class"/>
      <fileset defaultexcludes="no" dir="${compile.src.dir}" includes="**/*~"/>
    </delete>
    <delete dir="${build.dir}" failonerror="false" />
  </target>

  <!-- ==================== Compile Target ================================== -->

  <target name="compile"
	  depends="prepare"
	  description="Compile Java sources">

    <!-- Compile Java classes as necessary -->
    <mkdir    dir="${compile.output.dir}" />
    <javac srcdir="${compile.src.dir}"
           destdir="${compile.output.dir}"
           debug="${compile.debug}"
	   deprecation="${compile.deprecation}"
           optimize="${compile.optimize}"
           source="1.5">
      <classpath refid="compile.classpath" />
      <include name="**/*.java" />
    </javac>

  </target>

  <!-- ==================== War Target ====================================== -->

  <target name="war"
	  depends="compile"
	  description="Make Tomcat deployable WAR file.">
    <war destfile="${build.dir}/${shortName}.war"
	 webxml="${webapp.dir}/config/web.xml">
      <metainf file="${webapp.dir}/config/context.xml">
      </metainf>
      <classes dir="${compile.output.dir}" />
      <fileset dir="${webapp.dir}/content" />
    </war>
  </target>
  
  <!-- ==================== War Install Targets ============================= -->
  
  <target name="war-install"
	  depends="war"
	  description="Installs WAR file on Tomcat server.">
    <echo message="Deploying to manager: ${tomcat.manager.url}..." />
    <deploy url="${tomcat.manager.url}"
	    username="${tomcat.username}"
	    password="${tomcat.password}"
	    path="/${shortName}"
	    war="file:${build.dir}/${shortName}.war" />
  </target>
  
  <!-- ==================== War Un-Install Target ============================= -->
  
  <target name="war-uninstall"
	  description="Uninstalls the WAR file on Tomcat.">
    <undeploy url="${tomcat.manager.url}"
	      username="${tomcat.username}"
	      password="${tomcat.password}"
	      path="/${shortName}" />
  </target>
  
  <!-- ==================== War Re-Install Target ============================= -->
  
  <target name="war-reinstall"
	  description="Uninstall and existing WAR and redeploy it."
	  depends="prepare, war-uninstall,war-install" />
  
  
  <!-- ==================== Javadoc Target ================================== -->
  
  <target name="javadoc" depends="compile, javadoc.checkProperties"
	  description="Create Javadoc API documentation">

    <mkdir dir="${javadoc.output.dir}"/>
    <javadoc sourcepath="${compile.src.dir}"
             destdir="${javadoc.output.dir}"
	     additionalparam="${breakIterIf14}"
             packagenames="*"
             source="1.5">
      <classpath refid="compile.classpath"/>
    </javadoc>
  </target>

  <target name="javadoc.private" depends="compile, javadoc.checkProperties"
	  description="Create Javadoc for internal use (includes private items)">

    <mkdir dir="${javadoc.output.dir}"/>
    <javadoc sourcepath="${compile.src.dir}"
             destdir="${javadoc.output.dir}"
	     additionalparam="${breakIterIf14}"
             packagenames="*"
	     access="private">
      <classpath refid="compile.classpath"/>
    </javadoc>
  </target>
  
  <target name="javadoc.checkProperties"
     description="Sees if we need to use -breakiterator when generating javadoc">
    <condition property="breakIterIf14" value="-breakiterator">
      <equals arg1="1.4" arg2="${ant.java.version}"/>
    </condition>
    <condition property="breakIterIf14" value="">
      <not>
        <equals arg1="1.4" arg2="${ant.java.version}"/>
      </not>
    </condition>
  </target>

</project>
