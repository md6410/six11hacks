takeNum = 1

define hforward(sideLen, hingeLen, angle)
  forward(sideLen) ; one
  left(90)
  roll(angle)
  forward(hingeLen) ; two
  forward(0 - hingeLen) ; three
  right(90)
  forward (sideLen) ; four
  ;; Each hinged side has four forward statements
done

define sheet(a,b)
  forward(a)
  left(90)
  forward(b)
  left(90)
  forward(a)
  left(90)
  forward(b)
  left(90)
done

define replaceFwdWithHinge(idx, hingeLen, angle)
  sheetDefineTree = source(sheet)
  pprint("Take # (start)", takeNum)
  print(source(sheetDefineTree))
  sheetBodyTree = element(sheetDefineTree, 3)
  fwdIdx = findIndexOfListWithFirst(quote(forward), sheetBodyTree, idx-1, 0)
  if (fwdIdx >= 0)
    fwd = element(sheetBodyTree, fwdIdx)
    oldFwdParam = first(element(fwd, 2))
    newFwdParam = source(flatten([oldFwdParam, "/ 2"]))
    
    ; I now know which thing to replace and I have the parameter for the hinge.
    hingeBodyList = flatten(element(source(hforward), 3))
    sub(quote(sideLen), newFwdParam, hingeBodyList)
    sub(quote(hingeLen), hingeLen, hingeBodyList)
    sub(quote(angle), angle, hingeBodyList)

    fwdFirstThird = splitAtIndex(fwdIdx, sheetBodyTree)
    fwdSecondThird = splitAtIndex(1, fwdFirstThird[1])
    fwdLastHalf = [hingeBodyList, fwdSecondThird[1]]
    sheetNewBody = join(fwdFirstThird[0], fwdLastHalf)
    sheetNewDefine = copyList(0, 3, sheetDefineTree)
    sheetNewDefine = join(sheetNewDefine, sheetNewBody)
    sheetNewDefine = join(sheetNewDefine, sheetDefineTree[4])
    pprint("Take # (end)", takeNum)
    print(source(sheetNewDefine))
    takeNum = takeNum + 1
    eval(source(sheetNewDefine))
  done
done


angleA = 0
angleB = 0

;; fold L1 to L3:
replaceFwdWithHinge(4, quote(a), angleA)
replaceFwdWithHinge(2, quote(a), angleA)

;; fold L2 to L4:
replaceFwdWithHinge(6, quote(b/2), angleB)
replaceFwdWithHinge(1, quote(b/2), angleB)

sheet(4,2)


