package org.six11.olive2.rend;

import org.six11.util.gui.shape.Circle;
import java.awt.Stroke;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Shape;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.Collection;
import java.util.HashSet;
import java.io.FileWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import org.six11.util.pen.Sequence;
import org.six11.util.pen.Functions;
import org.six11.util.pen.Vec;
import org.six11.util.pen.Pt;
import org.six11.util.data.Statistics;
import org.six11.util.Debug;
import org.six11.olive2.SketchRenderer;
import org.six11.olive2.SketchInterpretation;
import org.six11.olive2.interp.LineInterpretation;
import org.six11.olive2.interp.PolygonInterpretation;

/**
 * 
 **/
public class PolygonRenderer extends SketchRenderer {

  private Stroke drawingStroke = new BasicStroke(1.6f);
  private Color borderColor = Color.BLACK;
  private Color fillColor = new Color(0.9f, 0.4f, 0.4f, 0.3f);
  private Color midColor = new Color(0.2f, 0.4f, 0.4f);

  public PolygonRenderer() {
    super(false, "polygon", "square");
  }
  
  public void render(Graphics2D g, SketchInterpretation interp) {
    // set the stroke + color
    g.setStroke(drawingStroke);
    g.setColor(borderColor);
    PolygonInterpretation polyInt = (PolygonInterpretation) interp;
    Shape outline = null;
    if (polyInt.getRectifiedGeometry("polygon").size() > 0) {
      List<Sequence> geom = polyInt.getRectifiedGeometry("polygon");
      outline = geom.get(0);
    } else {
      List<Pt> points = polyInt.getPoints();
      int[] xPoints = new int[points.size()];
      int[] yPoints = new int[points.size()];
      Statistics xstats = new Statistics();
      Statistics ystats = new Statistics();
      for (int i=0; i < points.size(); i++) {
	xPoints[i] = points.get(i).ix();
	yPoints[i] = points.get(i).iy();
	xstats.addData(points.get(i).getX());
	ystats.addData(points.get(i).getY());
      }
      outline = new Polygon(xPoints, yPoints, points.size());
    }
    g.draw(outline);
    if (polyInt.getColor() != null) {
      g.setColor(polyInt.getColor());
    } else {
      g.setColor(fillColor);
    }
    g.fill(outline);
    g.setColor(midColor);
//     Circle m = new Circle(xstats.getMean(), ystats.getMean(), 10d);
//     g.fill(m);
  }

  public void renderFlatLang(FileWriter writer, Collection<SketchInterpretation> manyInterps) {
    Debug.out("PolygonRenderer", "Render " + manyInterps.size() + " polygons, please");
    for (SketchInterpretation si : manyInterps) {
      if (si instanceof PolygonInterpretation) {
	renderFlatLang(writer, (PolygonInterpretation) si);
      }
    }
  }

  private void renderFlatLang(FileWriter writer, PolygonInterpretation pi) {
    try {
      Pt prevPt = null;
      Vec prevLine = null;
      Vec curLine = null;
      writer.write(";; Generated by Olive2 -- " + Debug.now() + "\n");
      writer.write("showPolygons(true)\n");
      writer.write("down()\n\n");
      writer.write("define mything()\n");
      int iteration = 0;
      List<Pt> points = new ArrayList<Pt>();
      points.addAll(pi.getPoints());
      points.add(pi.getPoints().get(0));
      for (Pt pt : points) {
	if (prevPt != null) {
	  curLine = new Vec(pt, prevPt);
	  if (prevLine != null) {
	    double angle = Functions.getAngleBetween(prevLine, curLine);
	    angle = Math.toDegrees(angle);
	    Debug.out("PolygonRenderer", "left " + angle);
	    writer.write("  left(" + angle + ")\n");	  
	  }
	  double mag = (curLine.mag() / 60d);
	  Debug.out("PolygonRenderer", "forward " + mag);
	  writer.write("  forward(" + mag + ")\n");	  
	  prevLine = curLine;
	}
	prevPt = pt;
	iteration++;
      }
      writer.write("done\n\n");
      
      // writer.write("turtle(0.4)\n");
      
      // if there is a file ``demo_flatlang_suffix.fl'', append it
      // here.
      try {
	BufferedReader suffix = new BufferedReader(new FileReader("/Users/johnsogg/Projects/FlatCAD/code/fl/demo_flatlang_suffix.fl"));
	while (suffix.ready()) {
	  writer.write(suffix.readLine() + "\n");
	}
      } catch (IOException ex) {
	
      }
      writer.flush();
    } catch (IOException ex) {
      Debug.out("PolygonRenderer", "Some sort of IO exception");
      ex.printStackTrace();
    }
  }
}

